const fs = require("fs");
let cache = {};
class Database {
  constructor() {
    cache = this.getAllNoCache();
    setInterval(() => (db.cache)?db.setAllNoCache(cache):cache = {}, 10000);
  }
  disableCache() {
    this.cache = false;
  }
  get(key) {
    const json = (this.cache)?cache:this.getAllNoCache();
    if (typeof key == "object") {
      const values = [];
      key.forEach((k, i) => (json[k])?values[i] = json[k]:"");
      return values;
    }
    else return json[key];
  }
  set(key, value) {
    const json = (this.cache)?cache:this.getAllNoCache();
    if (typeof key == "object") Object.keys(key).forEach(k => json[k] = key[k]);
    else json[key] = value;
    if (!this.cache) this.setAllNoCache(json);
  }
  setAllNoCache(json) {
    fs.writeFileSync(__dirname + "/db.json", JSON.stringify(json));
  }
  getAllNoCache() {
    return JSON.parse(fs.readFileSync(__dirname + "/db.json").toString())
  }
  list() {
    if (this.cache) return Object.keys(cache);
    else return Object.keys(this.getAllNoCache());
  }
  delete(key) {
    if (this.cache) delete cache[key];
    else {
      const json = this.getAllNoCache();
      delete json[key];
      this.setAllNoCache(json);
    }
  }
  empty() {
    if (this.cache) cache = {};
    else this.setAllNoCache({});
  }
}

const db = new Database();
module.exports = db;